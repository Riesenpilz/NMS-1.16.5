package io.github.riesenpilz.nms.packet.loginOut;

import org.bukkit.NamespacedKey;
import org.bukkit.entity.Player;

import io.github.riesenpilz.nms.reflections.Field;
import net.minecraft.server.v1_16_R3.MinecraftKey;
import net.minecraft.server.v1_16_R3.Packet;
import net.minecraft.server.v1_16_R3.PacketDataSerializer;
import net.minecraft.server.v1_16_R3.PacketLoginOutCustomPayload;
import net.minecraft.server.v1_16_R3.PacketLoginOutListener;

/**
 * https://wiki.vg/Protocol#Login_Plugin_Request<br>
 * Used to implement a custom handshaking flow together with Login Plugin
 * Response.<br>
 * <br>
 * Unlike plugin messages in "play" mode, these messages follow a lock-step
 * request/response scheme, where the client is expected to respond to a request
 * indicating whether it understood. The notchian client always responds that it
 * hasn't understood, and sends an empty payload. <br>
 * <br>
 * Packet ID: 0x04<br>
 * State: Login<br>
 * Bound To: Client
 * 
 * @author Martin
 *
 */
public class PacketLoginOutCustomPayloadEvent extends PacketLoginOutEvent {

	public static final String PROTOCOL_URL = "https://wiki.vg/Protocol#Login_Plugin_Request";
	public static final int PACKET_ID = 4;

	/**
	 * Generated by the server - should be unique to the connection.
	 */
	private int messageID;

	/**
	 * Name of the plugin channel used to send the data.
	 */
	private NamespacedKey channel;

	/**
	 * Any data, depending on the channel. The length of this array must be inferred
	 * from the packet length.
	 */
	private PacketDataSerializer data;

	public PacketLoginOutCustomPayloadEvent(Player injectedPlayer, int messageID, NamespacedKey channel,
			PacketDataSerializer data) {
		super(injectedPlayer, PACKET_ID, PROTOCOL_URL);
		this.messageID = messageID;
		this.channel = channel;
		this.data = data;
	}

	@SuppressWarnings("deprecation")
	public PacketLoginOutCustomPayloadEvent(Player injectedPlayer, PacketLoginOutCustomPayload packet) {
		super(injectedPlayer, PACKET_ID, PROTOCOL_URL);
		messageID = (int) new Field(PacketLoginOutCustomPayload.class, "a").get(packet);
		final MinecraftKey minecraftKey = (MinecraftKey) new Field(PacketLoginOutCustomPayload.class, "b").get(packet);
		channel = new NamespacedKey(minecraftKey.getNamespace(), minecraftKey.getNamespace());
		data = (PacketDataSerializer) new Field(PacketLoginOutCustomPayload.class, "c").get(packet);
	}

	public int getMessageID() {
		return messageID;
	}

	public NamespacedKey getChannel() {
		return channel;
	}

	public PacketDataSerializer getData() {
		return data;
	}

	@Override
	public Packet<PacketLoginOutListener> getNMS() {
		final PacketLoginOutCustomPayload packet = new PacketLoginOutCustomPayload();
		new Field(PacketLoginOutCustomPayload.class, "a").set(packet, messageID);
		new Field(PacketLoginOutCustomPayload.class, "b").set(packet,
				new MinecraftKey(channel.getNamespace(), channel.getKey()));
		new Field(PacketLoginOutCustomPayload.class, "c").set(packet, data);
		return packet;
	}

}
